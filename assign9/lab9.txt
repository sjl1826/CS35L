I first got a copy of the Diffutils repository by running the following command:

git clone https://git.savannah.gnu.org/git/diffutils.git

git log > git-log.txt

I used the "git log" command to get the log of changes to Diffutils' master branch.
I then used the "git tag" command to generate a list of tags used for Diffutils.

git tag > git-tags.txt

I then used the command - grep -n "maint: quote" git-log.txt - to find the line number.
OUTPUT:
1542:    maint: quote 'like this' or "like this", not `like this'

I then used emacs to go into git-log.txt and used
M-g M-g 1 5 4 2
to go to the line and find the commit which is:
62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f

I then used the following command to generate a patch for that commit.

git format-patch -1 --stdout 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt

I then checked out version 3.0 by the following command:

git checkout v3.0

OUTPUT:
Note: checking out 'v3.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at 022cd5c... version 3.0

I applied the patch using the command:

patch -p1 < quote-patch.txt

Some of the files asked

File to patch: 
Skip this patch? [y] y

I skipped the patches and was able to successfully patch version 3.0.

I used "git status" to get an overview of what happened.

OUTPUT:
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   NEWS
	modified:   README
	modified:   TODO
	modified:   doc/diagmeet.note
	modified:   ms/config.bat
	modified:   ms/config.site
	modified:   po/en.po
	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff.h
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/ifdef.c
	modified:   src/io.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/system.h
	modified:   src/util.c
	modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tags.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig

The patch modified the different files and git status shows which files were modified.

I then ran "C-x v u" to revert all the commits for the non ".c" files.
I ran "C-x v =" and "C-c C-a" to undo all the changes to ".c" files except for the changes to character string constants.

I then did "emacs src/*.c.rej" to examine the rejected patches.
I then copied the rejected patches into the corresponding .c files as needed.

I then removed the untracked files listed in git status using the command:

git clean -f

I then used the command "git status" to see the result.
OUTPUT:
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   src/cmp.c
	modified:   src/diff.c
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/sdiff.c
	modified:   src/util.c

DISCLAIMER: I moved all these files out of the directory into another directory.

I then used the following command to output a patch.

git diff > quote-3.0-patch.txt

I used the following command to get the number of lines.

wc -l quote-3.0-patch.txt

OUTPUT:
326 quote-3.0-patch.txt

I used "mv quote-3.0-patch.txt ~/assign9" to move the file out.

I then built the resulting modified version of diffutils, using the commands in README-hacking.

./bootstrap

I then ran into a gets issue and had to apply an extra patch.

curl http://web.cs.ucla.edu/classes/winter18/cs35L/assign/diffutils-gets.diff > diffutils-gets.diff

patch -p0 < diffutils-gets.diff

./configure
make
make check

I then tried to run diff.
./src/diff . -
./src/diff --help

These outputted "'" instead of "`" showing that the patch worked.

I then did a sanity test using the modified version of diffutils to compare it to diffutils-3.0.

I first had to clone the former source code.

git clone https://git.savannah.gnu.org/git/diffutils.git diffutils-3.0

I then went into the diffutils-3.0 directory and ran "git checkout 'v3.0'".

I then made a directory for my diffutils-3.0-patch.

mkdir diffutils-3.0-patch

I copied my file into the new directory.

cp ./diffutils/src/*.c ./diffutils-3.0-patch/

I then compared the files and put it into quote-3.0-test.txt.

 ./diffutils/src/diff -pru diffutils-3.0/src diffutils-3.0-patch > quote-3.0-test.txt

I used diff to compare the contents of quote-3.0-test.txt and quote-3.0-patch.txt.

diff -u quote-3.0-test.txt quote-3.0-patch.txt

The files are not identical. They are similar, however, with many changes from ` to '.
Since they do not make any major differences and do not change the implementation of diff,
they are innocuous.
